#!/usr/bin/env python3

import os
import sys
import math
from pathlib import Path

def convert_size(size_bytes: int, decimals: int = 2) -> str:
    """
    Convert a file size in bytes to a human-readable string with units.
    
    Args:
        size_bytes (int): File size in bytes.
        decimals (int): Number of decimal places for formatting.
        
    Returns:
        str: Human-readable file size string.
    """
    if size_bytes == 0:
        return "0 bytes"
    
    size_names = ["bytes", "KB", "MB", "GB", "TB", "PB"]
    i = int(math.floor(math.log(size_bytes, 1024)))
    p = math.pow(1024, i)
    s = round(size_bytes / p, decimals)
    
    return f"{s:.{decimals}f} {size_names[i]}"

def get_directory_size(path: Path) -> int:
    """
    Calculate the total size of a directory recursively.
    
    Args:
        path (Path): Path to the directory.
        
    Returns:
        int: Total size in bytes.
    """
    total_size = 0
    try:
        for entry in path.rglob('*'):
            if entry.is_file():
                try:
                    total_size += entry.stat().st_size
                except (OSError, PermissionError):
                    continue  # Skip files we can't access
    except (OSError, PermissionError):
        pass  # Skip directories we can't access
    
    return total_size

def get_file_info(path: str) -> dict:
    """
    Get comprehensive file/directory information including size.
    
    Args:
        path (str): Path to the file or directory.
        
    Returns:
        dict: Dictionary containing file/directory information or error details.
    """
    try:
        item_path = Path(path)
        
        if not item_path.exists():
            return {'error': 'File or directory not found', 'path': path, 'type': 'missing'}
        
        if item_path.is_file():
            # It's a file
            stat_info = item_path.stat()
            return {
                'path': str(item_path),
                'size': stat_info.st_size,
                'readable_size': convert_size(stat_info.st_size),
                'type': 'file',
                'modified': stat_info.st_mtime,
            }
        elif item_path.is_dir():
            # It's a directory - calculate total size recursively
            total_size = get_directory_size(item_path)
            return {
                'path': str(item_path),
                'size': total_size,
                'readable_size': convert_size(total_size),
                'type': 'directory',
                'item_count': sum(1 for _ in item_path.rglob('*') if _.is_file()),
            }
        else:
            # It's something else (symlink, device, etc.)
            return {'error': 'Not a regular file or directory', 'path': path, 'type': 'special'}
        
    except PermissionError:
        return {'error': 'Permission denied', 'path': path, 'type': 'permission_error'}
    except OSError as e:
        return {'error': f'OS error: {e}', 'path': path, 'type': 'os_error'}

def print_usage():
    """Print usage information."""
    print(f"Usage: {sys.argv[0]} <path> [path...]", file=sys.stderr)
    print("Display file or directory sizes in human-readable format.", file=sys.stderr)
    print("For directories, shows total recursive size.", file=sys.stderr)

def main():
    """Main function to handle command-line execution."""
    if len(sys.argv) < 2:
        print("[Error] Missing path argument.", file = sys.stderr)
        print_usage()
        sys.exit(1)
    
    # Handle help flag
    if sys.argv[1] in ['-h', '--help']:
        print_usage()
        sys.exit(0)

    if sys.argv[1] in ['-v', '--version']:
        print("0.0.3")
        sys.exit(0)
    
    exit_code = 0
    results = []
    total_size = 0
    file_count = 0
    dir_count = 0
    
    for path in sys.argv[1:]:
        item_info = get_file_info(path)
        
        if 'error' in item_info:
            print(f"Error: {item_info['error']} - '{item_info['path']}'", 
                  file=sys.stderr)
            exit_code = 1
        else:
            results.append(item_info)
            # Display different info based on type
            if item_info['type'] == 'file':
                print(f"{item_info['path']}: {item_info['readable_size']}")
                file_count += 1
            elif item_info['type'] == 'directory':
                item_count = item_info.get('item_count', 0)
                print(f"{item_info['path']}/: {item_info['readable_size']} ({item_count} files)")
                dir_count += 1
            
            total_size += item_info['size']
    
    # Display summary if multiple items
    if len(results) > 1:
        item_types = []
        if file_count > 0:
            item_types.append(f"{file_count} file{'s' if file_count > 1 else ''}")
        if dir_count > 0:
            item_types.append(f"{dir_count} director{'ies' if dir_count > 1 else 'y'}")
        
        type_summary = " and ".join(item_types) if item_types else "items"
        print(f"\nTotal: {convert_size(total_size)} ({type_summary})")
    
    sys.exit(exit_code)

if __name__ == "__main__":
    main()
